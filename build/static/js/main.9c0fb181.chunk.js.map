{"version":3,"sources":["components/ToDoList.js","components/ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ToDoList","react_default","a","createElement","className","action","onSubmit","this","props","addItem","type","placeholder","value","currentItem","text","onChange","handleInputField","React","Component","ListItem","item","key","title","_this","listItems","itemsArray","map","generateTasks","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateAppState","data","setState","items","saveEventDataLocally","console","log","event","inputText","target","Date","now","category","lat","long","location","details","preventDefault","newItem","state","concat","toConsumableArray","sendToDoItemsToDB","itemToAdd","axios","post","then","res","removeItem","_this2","getServerData","dataFromServer","catch","err","URL","process","toDoListAPIURL","get","response","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","ToDoList_ToDoList","inputElement","ListItem_ListItem","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","document","getElementById","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","openDB","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath"],"mappings":"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","file":"static/js/main.9c0fb181.chunk.js","sourcesContent":["import React from 'react'\nimport './ToDoList.css'\nexport default class ToDoList extends React.Component {\n\n  render() {\n    return (\n      <div className=\"toDoList\">\n        <h2>Add a todo item:</h2>\n\n        <form action=\"submit\" onSubmit={this.props.addItem}>\n          <input\n            type=\"text\"\n            placeholder=\"fix fence\"\n            // ref={this.props.inputElement}\n            value={this.props.currentItem.text}\n            onChange={this.props.handleInputField}\n          />\n          <button type=\"submit\">Add Task</button>\n        </form>\n\n      </div>\n    )\n  }\n}","import React from 'react'\nimport './ListItem.css'\n\nexport default class ListItem extends React.Component {\n  generateTasks(item) {\n    return (\n      <li key={item.key}>\n        <div className=\"list-item-checkbox\"></div>\n        <p>{item.title}</p>\n      </li>\n    )\n  }\n\n  render() {\n    const itemsArray = this.props.itemsArray\n    const listItems = itemsArray.map(item => {\n      return this.generateTasks(item)\n    })\n    \n    return (\n      <ul className=\"list-item\">\n        {listItems}\n        hello\n      </ul>\n    )\n  }\n}","import React from 'react';\nimport ToDoList from './components/ToDoList'\nimport ListItem from './components/ListItem'\nimport axios from 'axios'\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      items: [], // to do list items\n      currentItem: {\n        text:'',\n        key:''\n      } // store text entered\n    }\n  }\n\n  componentDidMount() {\n    // Get data from server after first render\n    // this.getServerData()\n\n    this.getServerData()\n      .then(dataFromServer => {\n        this.updateAppState(dataFromServer)\n        this.saveEventDataLocally(dataFromServer)\n      }).catch(err => console.log(err))\n  }\n\n  // const PORT = process.env.PORT || 8080\n  getServerData() {\n    const localUrl = 'http://localhost:8080/api/todolist'\n    const URL = process.env.toDoListAPIURL || localUrl\n\n    return axios.get(URL).then(response => {\n      return response.data\n    })\n    .catch(err => console.log(err))\n    // axios.get('http://localhost:8080/api/todolist')\n    // .then(response => {\n    //   this.setState({\n    //     items: response.data\n    //   })\n    // })\n    // .catch(err => console.log(err))\n  }\n\n  updateAppState = data => {\n    this.setState({\n      items: data\n    })\n  }\n\n\n  saveEventDataLocally = data => {\n    console.log('saving to indexedDb')\n  }\n\n  // capture input text ready to store when form submitted\n  handleInputField = event => {\n    console.log('input received')\n    const inputText = event.target.value // get text from input\n    const currentItem = {\n      key: Date.now(),\n      title: inputText,\n      category: 'placeholder',\n      lat: '00.000000', // get on submit\n      long: '00.000000', // get on submit\n      location: 'placeholder',\n      details: 'placeholder'\n    }\n    this.setState({currentItem})\n  }\n\n\n  // adds the current item to the item array\n  addItem = event => {\n    event.preventDefault()\n    const newItem = this.state.currentItem\n    console.log(`adding new item to state: ${newItem.title}`)\n    // update state with newItem\n    const items = [ ...this.state.items, newItem ]\n    this.setState({\n      items: items,\n      // reset currentItem to empty values\n      currentItem: { text: '', key: ''}\n    })\n    // update db with newItem\n    this.sendToDoItemsToDB(newItem)\n  }\n\n\n  // Send item to database\n  sendToDoItemsToDB = itemToAdd => {\n    let apiUrl = 'http://localhost:8080/api/todolist'\n    axios.post(apiUrl, itemToAdd)\n    .then(res => {\n      console.log(res)\n    })\n  }\n\n\n  removeItem = event => {\n    console.log('item removed')\n  }\n\n\n  getCurrentGPSPosition() {\n    if (\"geolocation\" in navigator) {\n      // check if geolocation is supported\n      navigator.geolocation.getCurrentPosition( position => {\n        console.log(`lat: ${position.coords.latitude}`)\n        console.log(`long: ${position.coords.longitude}`)\n      })\n      // provide error condition if location not returned\n    } else {\n      console.log('geolocation is not enabled')\n      // get location some other way\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ToDoList\n          addItem={this.addItem}\n          inputElement={this.inputElement}\n          handleInputField={this.handleInputField}\n          currentItem={this.state.currentItem}\n        />\n        <h2>Current todo list:</h2>\n        <ListItem itemsArray={this.state.items}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n\n\n// import importScripts from 'import-scripts'\n\n\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\n\n\n// TRYING TO BG SYNC WITH WORKBOX\n// https://developers.google.com/web/tools/workbox/modules/workbox-background-sync\n\n// importScripts('https://storage.googleapis.com/workbox-cdn/releases/4.3.1/workbox-sw.js');\n\n// console.log(workbox)\n// const bgSyncPlugin = new workbox.backgroundSync.Plugin('todolist-queue', {\n//   maxRetentionTime: 24 * 60 // Retry for max of 24 Hours\n// });\n\n// workbox.routing.registerRoute(\n//   /\\/api\\/.*\\/*.json/,\n//   new workbox.strategies.NetworkOnly({\n//     plugins: [bgSyncPlugin]\n//   }),\n//   'POST'\n// );\n\n\n\n// TRY BG SYNC WITH SERVICE WORKER (NO LIBRARY)\n// self.addEventListener('sync', function(event) {\n//   if (event.tag == 'myFirstSync') {\n//     event.waitUntil(doSomeStuff());\n//   }\n// });\n\n// function doSomeStuff() {\n//   console.log('stuff')\n// }\n\n\n\n\n// problems\n/*\nbuilding with webpack\nrunning on Node\nmake it ignore undefined so that it still works in browser\nif use webpack and workbox then must config\notherwise try not using workbox library\nMAKE MY OWN FILE AND REGISTER MY OWN\n\n\nwebpack and serviceworkers - configuration\n\nheroku create\nsurge instead of heroku\n\n*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// imported idb for indexedDB below\nimport { openDB, deleteDB, wrap, unwrap } from 'idb'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n\n\n// call bg sync for service worker\n// navigator.serviceWorker.ready.then(function(swRegistration) {\n//   return swRegistration.sync.register('myFirstSync');\n// });\n\n\n// Create a database within IndexedDB local browser\nfunction createIndexedDB() {\n  if (!('indexedDB' in window)) {return null;}\n  return openDB('todolist', 1, function(upgradeDb) {\n    if (!upgradeDb.objectStoreNames.contains('events')) {\n      const eventsOS = upgradeDb.createObjectStore('events', {keyPath: 'id'});\n    }\n  });\n}\n\n// create indexedDB database and get back a promise\nconst dbPromise = createIndexedDB();"],"sourceRoot":""}
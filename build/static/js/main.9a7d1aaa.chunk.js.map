{"version":3,"sources":["components/ToDoList.js","components/ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ToDoList","react_default","a","createElement","className","action","onSubmit","this","props","addItem","type","placeholder","value","currentItem","text","onChange","handleInputField","React","Component","ListItem","item","key","title","_this","listItems","itemsArray","map","generateTasks","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","console","log","inputText","target","Date","now","category","lat","long","location","details","setState","preventDefault","newItem","state","concat","items","toConsumableArray","sendToDoItemsToDB","itemToAdd","axios","post","then","res","removeItem","getToDoItemsFromDB","_this2","get","data","catch","err","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","ToDoList_ToDoList","inputElement","ListItem_ListItem","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9a7d1aaa.chunk.js","sourcesContent":["import React from 'react'\nimport './ToDoList.css'\nexport default class ToDoList extends React.Component {\n\n  render() {\n    return (\n      <div className=\"toDoList\">\n        <h2>Add a todo item:</h2>\n\n        <form action=\"submit\" onSubmit={this.props.addItem}>\n          <input\n            type=\"text\"\n            placeholder=\"fix fence\"\n            // ref={this.props.inputElement}\n            value={this.props.currentItem.text} // need .text otherwise object returned\n            onChange={this.props.handleInputField}\n          />\n          <button type=\"submit\">Add Task</button>\n        </form>\n\n      </div>\n    )\n  }\n}","import React from 'react'\nimport './ListItem.css'\n\nexport default class ListItem extends React.Component {\n  generateTasks(item) {\n    return (\n      <li key={item.key}>\n        <div className=\"list-item-checkbox\"></div>\n        <p>{item.title}</p>\n      </li>\n    )\n  }\n\n  render() {\n    const itemsArray = this.props.itemsArray\n    const listItems = itemsArray.map(item => {\n      return this.generateTasks(item)\n    })\n    \n    return (\n      <ul className=\"list-item\">\n        {listItems}\n      </ul>\n    )\n  }\n}","import React from 'react';\nimport ToDoList from './components/ToDoList'\nimport ListItem from './components/ListItem'\nimport axios from 'axios'\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      items: [], // to do list items\n      currentItem: {\n        text:'',\n        key:''\n      } // store text entered\n    }\n  }\n\n  // Get data from server after first render\n  componentDidMount() {\n    this.getToDoItemsFromDB();\n  }\n\n  getToDoItemsFromDB() {\n    let apiUrl = 'http://localhost:8080/api/todolist'\n    axios.get(apiUrl) // get api data\n    .then(res => {\n      this.setState({ // add db items to state\n        items: res.data\n      })\n    })\n    .catch(err => console.log(err))\n  }\n\n\n\n  // capture input text ready to store when form submitted\n  handleInputField = event => {\n    console.log('input received')\n    const inputText = event.target.value // get text from input\n    const currentItem = {\n      key: Date.now(),\n      title: inputText,\n      category: 'placeholder',\n      lat: '00.000000', // get on submit\n      long: '00.000000', // get on submit\n      location: 'placeholder',\n      details: 'placeholder'\n    }\n    this.setState({currentItem})\n  }\n\n\n  // adds the current item to the item array\n  addItem = event => {\n    event.preventDefault()\n    const newItem = this.state.currentItem\n    console.log(`adding new item to state: ${newItem.title}`)\n    // update state with newItem\n    const items = [ ...this.state.items, newItem ]\n    this.setState({\n      items: items,\n      // reset currentItem to empty values\n      currentItem: { text: '', key: ''}\n    })\n    // update db with newItem\n    this.sendToDoItemsToDB(newItem)\n  }\n\n\n  // Send item to database\n  sendToDoItemsToDB = itemToAdd => {\n    let apiUrl = 'http://localhost:8080/api/todolist'\n    axios.post(apiUrl, itemToAdd)\n    .then(res => {\n      console.log(res)\n    })\n  }\n\n\n  removeItem = event => {\n    console.log('item removed')\n  }\n\n\n  getCurrentGPSPosition() {\n    if (\"geolocation\" in navigator) {\n      // check if geolocation is supported\n      navigator.geolocation.getCurrentPosition( position => {\n        console.log(`lat: ${position.coords.latitude}`)\n        console.log(`long: ${position.coords.longitude}`)\n      })\n      // provide error condition if location not returned\n    } else {\n      console.log('geolocation is not enabled')\n      // get location some other way\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ToDoList\n          addItem={this.addItem}\n          inputElement={this.inputElement}\n          handleInputField={this.handleInputField}\n          currentItem={this.state.currentItem}\n        />\n        <h2>Current todo list:</h2>\n        <ListItem itemsArray={this.state.items}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}